# Servicios comunes para la GPT API
# common.yml V0.0.1

version: '3.9'

networks:
  public:
  private:
  cms:
  ingress:
    external: true
    name: ${INGRESS_NET}
  
volumes:
  mongo_data:
  cms_data:
  filebrowser_data:
  postgres_data:
  redis_data:
  sentiment_data:
  weaviate_data:

services:
  
  cms:
    image: ${CMS_IMAGE-directus/directus}

    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${INGRESS_NET}
        - traefik.constraint-label=${INGRESS_NET}
        - traefik.http.routers.${NAME}-cms-http.rule=Host(`cms.yoizen.saia.ar`)
        - traefik.http.routers.${NAME}-cms-http.entrypoints=http
        - traefik.http.routers.${NAME}-cms-http.middlewares=https-redirect
        - traefik.http.routers.${NAME}-cms-https.rule=Host(`${CMS_DOMAIN}`) || Host(`www.${CMS_DOMAIN}`)
        - traefik.http.routers.${NAME}-cms-https.entrypoints=https
        - traefik.http.routers.${NAME}-cms-https.tls=true
        - traefik.http.routers.${NAME}-cms-https.tls.certresolver=le
        - traefik.http.services.${NAME}-cms.loadbalancer.server.port=${CMS_PORT-80}
      resources:
        limits:
          cpus: '1.66'
          memory: 1500M
        reservations:
          cpus: '0.25'
          memory: 500M
      replicas: 1
      placement:
        constraints:
          - node.role == worker    
    volumes:
      - cms_data:/directus
    ports:
      - "${STACK_CODE-300}45:80"
    environment:
      - PUBLIC_URL=${CMS_PUBLIC_URL}
      - PORT=${CMS_PORT}
      - KEY=${CMS_KEY}
      - SECRET=${CMS_SECRET}
      - ADMIN_EMAIL=${CMS_ADMIN_EMAIL}
      - ADMIN_PASSWORD=${CMS_ADMIN_PASSWORD}
      - DB_CLIENT=${CMS_DB_CLIENT}
      - DB_HOST=${CMS_DB_HOST}
      - DB_PORT=${CMS_DB_PORT}
      - DB_DATABASE=${CMS_DB_DATABASE}
      - DB_USER=${CMS_DB_USER}
      - DB_PASSWORD=${CMS_DB_PASSWORD}
    networks:
      - cms
      - private
      - ingress
         
      
  filebrowser:
    image: ${FILEBROWSER_IMAGE-hurlenko/filebrowser}
    deploy:
      placement:
        constraints:
          - node.role == worker     
    #labels:
     # com.docker.stack.service.path: ""
      #traefik.enable: "true"
      #traefik.http.routers.atenasf-router.rule: PathPrefix(`${STACK_NAME}`)
      #traefik.http.middlewares.atenas-sp.stripprefix.prefixes: /${STACK_NAME}
      #traefik.http.routers.atenas-router.middlewares: atenas-sp
    #environment:
      #FB_BASEURL: "/{{ index .Service.Labels `com.docker.stack.namespace`}}"
    volumes:
      - filebrowser_data:/config
    ports:
      - "1212:8080"
    networks:
      - public
  
  gpt_api:
    image: ${GPT_API_IMAGE-alexanderditzend/gpt-api:0.1.0}
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 5000M
        reservations:
          cpus: '0.25'
          memory: 500M
      replicas: 3
      placement:
        constraints:
          - node.role == worker  
    ports:
      - ${GPT_API_PORT-30048}:80
    networks:
      - public
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTIMENT_URL=${SENTIMENT_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  postgres:
    image: ${POSTGRES_IMAGE-postgres:12}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker     
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${STACK_CODE-300}32:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - private
      
  redis:
    image: ${REDIS_IMAGE-redis}
    deploy:
      placement:
        constraints:
          - node.role == worker 
    networks:
      - public
    ports:
      - "${STACK_CODE-300}69:6379"
    volumes:
      - redis_data:/data
  
  sentiment:
    image: ${ANALYTICS_SENTIMENT_IMAGE-alexanderditzend/analytics_sentiment:1.0.1}
    deploy:
      placement:
        constraints:
          - node.role == worker     
    networks:
      - public
    volumes:
      - sentiment_data:/.cache
    ports:
      - "${ANALYTICS_SENTIMENT_PORT-30048}:8000"  
  weaviate:
    image: semitechnologies/weaviate:1.18.3
    deploy:
      placement:
        constraints:
          - node.role == worker    
    ports:
    - "${WEAVIATE_PORT-39478}:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate  
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'    